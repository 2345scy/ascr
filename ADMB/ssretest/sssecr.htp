#if !defined(_sssecr_)
#  define _sssecr_

class model_data : public ad_comm{
  data_int n;
  data_int ntraps;
  data_int nmask;
  data_number A;
  data_matrix capt;
  data_matrix sscapt;
  data_matrix dist;
  data_number c;
  data_matrix traps;
  data_number trace;
  dvector trapsX;
  dvector trapsY;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value f;
  param_init_bounded_number D;
  param_init_number ssb0;
  param_init_bounded_number ssb1;
  param_init_bounded_number sigmass;
public:
  virtual void userfunction(void);
  virtual void report(void);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void){}

};
#endif
